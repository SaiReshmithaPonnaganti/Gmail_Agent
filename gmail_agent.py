# -*- coding: utf-8 -*-
"""Gmail_Agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l6VRqxNe3r3-im7UkPrzYfw1_X8PVl9w
"""

import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Function to send email
def send_email(sender_email, sender_password, recipient_email, subject, body):
    # Create the email content
    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = recipient_email
    msg['Subject'] = subject

    msg.attach(MIMEText(body, 'plain'))

    # Set up the server
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()

    # Log in to the email account
    server.login(sender_email, sender_password)

    # Send the email
    server.sendmail(sender_email, recipient_email, msg.as_string())

    # Close the server connection
    server.quit()

# Function to display email content
def display_email_content(sender_email, recipient_email, subject, body):
    print(f"From: {sender_email}")
    print(f"To: {recipient_email}")
    print(f"Subject: {subject}")
    print("Body:")
    print(body)

# Fetching email credentials from environment variables
sender_email = os.getenv('SENDER_EMAIL', 'x')  # Default value for testing
sender_password = os.getenv('SENDER_PASSWORD', 'y')          # Default value for testing

if not sender_email or not sender_password:
    raise ValueError("Please set the environment variables SENDER_EMAIL and SENDER_PASSWORD")

recipients = ['322103310199@gvpce.ac.in', 'saireshmithaponnaganti@gmail.com']
subject = 'Congratulations! You Are Qualified for the Job'
body_template = """
Dear {recipient_name},

We are pleased to inform you that after reviewing your application, we find that your qualifications and experience match the job description for the position of {job_title} at {company_name}.

We believe you would be an excellent fit for our team and are excited to discuss the next steps with you. Please let us know your availability for a follow-up interview.

Thank you for your interest in joining our company. We look forward to speaking with you soon.

Best regards,
{your_name}
{your_title}
{company_name}
"""

# Customize these fields
job_title = "Software Engineer"
company_name = "Tech Innovators Inc."
your_name = "John Doe"
your_title = "HR Manager"

# Sending and displaying emails
for recipient in recipients:
    # Customize the body for each recipient
    recipient_name = recipient.split('@')[0]  # Assuming the recipient's name is the first part of their email
    body = body_template.format(recipient_name=recipient_name, job_title=job_title, company_name=company_name, your_name=your_name, your_title=your_title)

    send_email(sender_email, sender_password, recipient, subject, body)
    display_email_content(sender_email, recipient, subject, body)

from google.colab import drive
drive.mount('/content/drive')

pip install pandas

import os
import smtplib
import pandas as pd
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Function to send email
def send_email(sender_email, sender_password, recipient_email, subject, body):
    # Create the email content
    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = recipient_email
    msg['Subject'] = subject

    msg.attach(MIMEText(body, 'plain'))

    # Set up the server
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()

    # Log in to the email account
    server.login(sender_email, sender_password)

    # Send the email
    server.sendmail(sender_email, recipient_email, msg.as_string())

    # Close the server connection
    server.quit()

# Function to display email content
def display_email_content(sender_email, recipient_email, subject, body):
    print(f"From: {sender_email}")
    print(f"To: {recipient_email}")
    print(f"Subject: {subject}")
    print("Body:")
    print(body)

# Function to read email addresses from CSV file
def read_emails_from_csv(file_path):
    df = pd.read_csv(file_path)
    return df['email'].tolist()

# Example usage
sender_email = os.getenv('SENDER_EMAIL', 'x')  # Default value for testing
sender_password = os.getenv('SENDER_PASSWORD', 'y')     # Default value for testing

if not sender_email or not sender_password:
    raise ValueError("Please set the environment variables SENDER_EMAIL and SENDER_PASSWORD")

# Path to the CSV file
csv_file_path = '/content/drive/MyDrive/emails.csv'

# Reading email addresses from the CSV file
recipients = read_emails_from_csv(csv_file_path)
subject = 'Congratulations! You Are Qualified for the Job'
body_template = """
Dear {recipient_name},

We are pleased to inform you that after reviewing your application, we find that your qualifications and experience match the job description for the position of {job_title} at {company_name}.

We believe you would be an excellent fit for our team and are excited to discuss the next steps with you. Please let us know your availability for a follow-up interview.

Thank you for your interest in joining our company. We look forward to speaking with you soon.

Best regards,
{your_name}
{your_title}
{company_name}
"""

# Customize these fields
job_title = "Software Engineer"
company_name = "Tech Innovators Inc."
your_name = "John Doe"
your_title = "HR Manager"

# Sending and displaying emails
for recipient in recipients:
    # Customize the body for each recipient
    recipient_name = recipient.split('@')[0]  # Assuming the recipient's name is the first part of their email
    body = body_template.format(recipient_name=recipient_name, job_title=job_title, company_name=company_name, your_name=your_name, your_title=your_title)

    send_email(sender_email, sender_password, recipient, subject, body)
    display_email_content(sender_email, recipient, subject, body)

import os
import smtplib
import pandas as pd
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

# Function to send email with attachment
def send_email_with_attachment(sender_email, sender_password, recipient_email, subject, body, attachment_path):
    # Create the email content
    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = recipient_email
    msg['Subject'] = subject

    # Attach body text
    msg.attach(MIMEText(body, 'plain'))

    # Attach file
    with open(attachment_path, "rb") as attachment:
        part = MIMEBase("application", "octet-stream")
        part.set_payload(attachment.read())

    encoders.encode_base64(part)
    part.add_header(
        "Content-Disposition",
        f"attachment; filename= {os.path.basename(attachment_path)}",
    )

    msg.attach(part)

    # Set up the server
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()

    # Log in to the email account
    server.login(sender_email, sender_password)

    # Send the email
    server.sendmail(sender_email, recipient_email, msg.as_string())

    # Close the server connection
    server.quit()

# Function to display email content
def display_email_content(sender_email, recipient_email, subject, body):
    print(f"From: {sender_email}")
    print(f"To: {recipient_email}")
    print(f"Subject: {subject}")
    print("Body:")
    print(body)

# Function to read email addresses from CSV file
def read_emails_from_csv(file_path):
    df = pd.read_csv(file_path)
    return df['email'].tolist()

# Example usage
sender_email = os.getenv('SENDER_EMAIL', 'x')  # Default value for testing
sender_password = os.getenv('SENDER_PASSWORD', 'y')     # Default value for testing

if not sender_email or not sender_password:
    raise ValueError("Please set the environment variables SENDER_EMAIL and SENDER_PASSWORD")

# Path to the CSV file
csv_file_path = '/content/drive/MyDrive/filtered_data.csv'

# Reading email addresses from the CSV file
recipients = read_emails_from_csv(csv_file_path)
subject = 'Congratulations! You Are Qualified for the Job'
body_template = """
Dear {recipient_name},

We are pleased to inform you that after reviewing your Linkedin profile, we find that your qualifications and experience match the job description for the position of {job_title} at {company_name}.

We believe you would be an excellent fit for our team and are excited to discuss the next steps with you. Please let us know your availability for a follow-up interview.

Thank you , we are looking forward to speaking with you soon.

Best regards,
{your_name}
{your_title}
{company_name}

"""

# Customize these fields
job_title = " Acme Industries"
company_name = " Acme Industries."
your_name = "John Doe"
your_title = "HR Manager"

# Attachment path
attachment_path = '/content/drive/MyDrive/Python Programmer for Data Science Team .pdf'
# Sending and displaying emails
for recipient in recipients:
    # Customize the body for each recipient
    recipient_name = recipient.split('@')[0]  # Assuming the recipient's name is the first part of their email
    body = body_template.format(recipient_name=recipient_name, job_title=job_title, company_name=company_name, your_name=your_name, your_title=your_title)

    send_email(sender_email, sender_password, recipient, subject, body)
    display_email_content(sender_email, recipient, subject, body)

import os
import smtplib
import pandas as pd
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

# Function to send email with attachment
def send_email_with_attachment(sender_email, sender_password, recipient_email, subject, body, attachment_path):
    # Create the email content
    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = recipient_email
    msg['Subject'] = subject

    # Attach body text
    msg.attach(MIMEText(body, 'plain'))

    # Attach file
    with open(attachment_path, "rb") as attachment:
        part = MIMEBase("application", "octet-stream")
        part.set_payload(attachment.read())

    encoders.encode_base64(part)
    part.add_header(
        "Content-Disposition",
        f"attachment; filename= {os.path.basename(attachment_path)}",
    )

    msg.attach(part)

    # Set up the server
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()

    # Log in to the email account
    server.login(sender_email, sender_password)

    # Send the email
    server.sendmail(sender_email, recipient_email, msg.as_string())

    # Close the server connection
    server.quit()

# Function to display email content
def display_email_content(sender_email, recipient_email, subject, body):
    print(f"From: {sender_email}")
    print(f"To: {recipient_email}")
    print(f"Subject: {subject}")
    print("Body:")
    print(body)

# Function to read email addresses from CSV file
def read_emails_from_csv(file_path):
    df = pd.read_csv(file_path)
    return df['email'].tolist()

# Example usage
sender_email = os.getenv('SENDER_EMAIL', 'x')  # Default value for testing
sender_password = os.getenv('SENDER_PASSWORD', 'y')     # Default value for testing

if not sender_email or not sender_password:
    raise ValueError("Please set the environment variables SENDER_EMAIL and SENDER_PASSWORD")

# Path to the CSV file
csv_file_path = '/content/drive/MyDrive/filtered_data.csv'

# Reading email addresses from the CSV file
recipients = read_emails_from_csv(csv_file_path)
subject = 'Congratulations! You Are Qualified for the Job'
body_template = """
Dear Candidate,

We are pleased to inform you that after reviewing your Linkedin profile, we find that your qualifications and experience match the job description for the position of {job_title} at {company_name}.

We believe you would be an excellent fit for our team and are excited to discuss the next steps with you. Please let us know your availability for a follow-up interview.

Thank you , we are looking forward to speaking with you soon.

Best regards,
{your_name}
{your_title}
{company_name}
"""

# Customize these fields
job_title = "Python Programmer"
company_name = "Acme Industries"
your_name = "John Doe"
your_title = "HR Manager"

# Attachment path
attachment_path = '/content/drive/MyDrive/Python Programmer for Data Science Team .pdf'  # Update with the path to your attachment

# Sending and displaying emails
for recipient in recipients:
    # Customize the body for each recipient
    recipient_name = recipient.split('@')[0]  # Assuming the recipient's name is the first part of their email
    body = body_template.format(recipient_name=recipient_name, job_title=job_title, company_name=company_name, your_name=your_name, your_title=your_title)

    send_email_with_attachment(sender_email, sender_password, recipient, subject, body, attachment_path)
    display_email_content(sender_email, recipient, subject, body)